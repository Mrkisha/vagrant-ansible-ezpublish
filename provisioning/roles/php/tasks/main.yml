---
# tasks file for php
- name: Add the OS specific varibles
  include_vars: "{{ ansible_os_family }}.yml"

- name: Check the php version
  command: php -v
  ignore_errors: True
  register: php_version_result
  when: ansible_os_family == "Debian" and use_php56 == true
  tags: [packages, php55, packages]

- name: Register the current extension directory
  command: php-config --extension-dir
  ignore_errors: True
  register: php_extension_directory
  when: ansible_os_family == "Debian" and use_php56 == true and php_version_result|failed == false
  failed_when: "'/usr/lib/php5/20131226' in php_extension_directory.stdout"
  tags: [php, php56, packages]

- name: Remove dotdeb if installing php 5.6 (dotdeb)
  # Remove specified repository from sources list.
  apt_repository: repo='deb http://packages.dotdeb.org wheezy-php55 all' state=absent update_cache=yes
  environment: env
  when: ansible_os_family == "Debian" and ansible_distribution_version|float >= 12.10 and use_php56 == true
  tags: [php, php56, packages]

- name: Add php 5.6 repository if needed for quantal and newer (ondrej)
  # Add specified repository into sources list.
  apt_repository: repo='ppa:ondrej/php5-5.6/ubuntu trusty main' state=present update_cache=yes
  environment: env
  when: ansible_os_family == "Debian" and ansible_distribution_version|float >= 12.10 and use_php56 == true
  tags: [php, php56, packages]

- name: Install the php libraries (APT)
  apt: name={{ item }} state=latest update_cache=yes
  with_items: php_packages
  environment: env
  when: ansible_os_family == "Debian" and php_packages|lower != 'none'
  tags: [php, packages]

- name: Make timezone configuration available to php
  copy: dest={{ php_mods_available }}/timezone.ini content="; configuration for php timezone\n;[Date]\ndate.timezone=America/New_York\n"
  ignore_errors: true
  when: ansible_os_family == "Debian"

- name: Enable timezone configuration available to php
  command: php5enmod timezone
  ignore_errors: true
  when: ansible_os_family == "Debian"

- name: Customized memory limits
  copy: dest={{ php_mods_available }}/memory_limits.ini content="; configuration for memory limits\nmemory_limit = 256M\nupload_max_filesize = 1024M\npost_max_size = 1024M\n"
  ignore_errors: true
  when: ansible_os_family == "Debian"

- name: Enable memory limits available to php
  command: php5enmod memory_limits
  ignore_errors: true
  when: ansible_os_family == "Debian"

- name: Customized time limits
  copy: dest={{ php_mods_available }}/time_limits.ini content="; configuration for time limits\nmax_execution_time = 60\nmax_input_time = 90\n"
  ignore_errors: true
  when: ansible_os_family == "Debian"

- name: Enable time limits available to php
  command: php5enmod time_limits
  ignore_errors: true
  when: ansible_os_family == "Debian"

- name: Install OpCache
  command: pecl install zendopcache
  ignore_errors: true
  when: use_php56 == false

- name: Configure OpCache
  copy: src=opcache.ini dest=/etc/php5/mods-available/opcache.ini
  ignore_errors: true
  when: ansible_os_family == "Debian"

- name: Enable OpCache
  command: php5enmod opcache
  ignore_errors: true
  when: ansible_os_family == "Debian"

- name: Install xdebug
  apt: name={{ item }} state=present update_cache=yes
  # located in vars/main.yml
  with_items: php_xdebug
  environment: env
  when: ansible_os_family == "Debian" and use_xdebug == true
  tags: [php, packages, xdebug, dev]

- name: Make sure the xdebug.ini does not reference the extension dir
  # Because php, the xdebug.ini generated by apt has something along
  # the lines of zend_extension=/usr/lib/php5/20121212/xdebug.so
  # which sometimes gets updated, and sometimes does not
  copy: dest={{ php_mods_available }}/xdebug.ini content="; configuration for php xdebug module\n; priority=20\nzend_extension=xdebug.so\nxdebug.max_nesting_level = 1000\n"
  ignore_errors: true
  when: ansible_os_family == "Debian" and use_xdebug == true

- name: Enable XDebug
  command: php5enmod xdebug
  ignore_errors: true
  when: ansible_os_family == "Debian" and use_xdebug == true

- name: Install the php-fpm specific libraries (APT)
  apt: name={{ item }} state=present update_cache=yes
  # located in vars/main.yml
  with_items: php_fpm_packages
  environment: env
  when: ansible_os_family == "Debian" and use_php5_fpm == true
  tags: [php, php_fpm, packages]

  # on a newly built box I encountered the following error:
  # [crit] 9162#0: *18 connect() to unix:/var/run/php5-fpm.sock failed (13: Permission denied) while connecting to upstream
  # AFAIU the problem was caused by the fix implemented for https://bugs.php.net/bug.php?id=67060
  # The solution is from http://stackoverflow.com/a/23487409 (second addition)
- name: Copy the www pool additional configuration
  template: src=fpm.j2
            dest={{ php_fpm_pool_d_path }}/{{ item['filename'] }}.conf
            backup=yes
            owner=root
            group=root
            mode=0644
  # located in defaults/main.yml
  with_items: php_fpm_www_additional
  when: php_fpm_www_additional|lower != 'none' and use_php5_fpm == true
  notify:
   - restart php5-fpm
  tags: [configuration,php_fpm]

- name: Tune php5-fpm
  copy: src=php-fpm.conf dest=/etc/php5/fpm/php-fpm.conf owner=root group=root mode=0644
  notify: restart php5-fpm
  when: ansible_os_family == "Debian" and use_php5_fpm == true
  tags: [php_fpm]

- name: ensure php5-fpm service is up
  action: service name=php5-fpm state=started
  when: ansible_os_family == "Debian" and use_php5_fpm == true
  tags: [php, php_fpm]

